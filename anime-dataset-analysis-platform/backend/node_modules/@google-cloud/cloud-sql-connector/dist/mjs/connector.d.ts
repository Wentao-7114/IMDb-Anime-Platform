/// <reference types="node" />
import tls from 'node:tls';
import { IpAddressTypes } from './ip-addresses.js';
import { AuthTypes } from './auth-types.js';
export declare interface ConnectionOptions {
    authType?: AuthTypes;
    ipType?: IpAddressTypes;
    instanceConnectionName: string;
}
interface StreamFunction {
    (): tls.TLSSocket;
}
interface PromisedStreamFunction {
    (): Promise<tls.TLSSocket>;
}
export declare interface DriverOptions {
    stream: StreamFunction;
}
export declare interface TediousDriverOptions {
    connector: PromisedStreamFunction;
    encrypt: boolean;
}
interface ConnectorOptions {
    sqlAdminAPIEndpoint?: string;
}
export declare class Connector {
    private readonly instances;
    private readonly sqlAdminFetcher;
    constructor({ sqlAdminAPIEndpoint }?: ConnectorOptions);
    getOptions({ authType, ipType, instanceConnectionName, }: ConnectionOptions): Promise<DriverOptions>;
    getTediousOptions({ authType, ipType, instanceConnectionName, }: ConnectionOptions): Promise<TediousDriverOptions>;
    close(): void;
}
export {};
//# sourceMappingURL=connector.d.ts.map