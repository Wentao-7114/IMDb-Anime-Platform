# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hgv7ZY1luwJThKjKBUUeRVvKXNLpoU0p

Movie title recommendation through cosine similarity & Utilize the 'synopsis' column to recommend similar anime titles using NLP techniques.
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
import nltk

df = pd.read_csv('./Dataset/cleaned_data.csv')
df.head(5)

df.columns

# Create a TF-IDF Vectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english')

# Fit and transform the data
tfidf_matrix = tfidf_vectorizer.fit_transform(df['synopsis'])

tfidf_matrix

# Compute the cosine similarity matrix
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

cosine_sim

# Function to get the most similar anime
def recommend_anime(title, cosine_sim=cosine_sim):
    # Get the index of the anime that matches the title
    idx = df.loc[df['title'] == title].index[0]

    # Get the pairwise similarity scores of all anime with that anime
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the anime based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 10 most similar anime
    sim_scores = sim_scores[1:11]

    # Get the anime indices
    anime_indices = [i[0] for i in sim_scores]

    # Return the top 10 most similar anime
    return df['title'].iloc[anime_indices]

# Test the recommendation function
recommendations = recommend_anime('Digimon Adventure: Bokura no War Game!')
print(recommendations)

nltk.download('punkt')
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

stop_words = set(stopwords.words('english'))

# Preprocessing function
def preprocess(text):
    tokens = word_tokenize(text.lower())
    words = [word for word in tokens if word.isalpha()]  # Removing punctuation
    words = [word for word in words if word not in stop_words]  # Removing stopwords
    return ' '.join(words)

df['processed_synopsis'] = df['synopsis'].apply(preprocess)
print(df['processed_synopsis'])

vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(df['processed_synopsis'])

cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

def recommend_anime(title):
    idx = df[df['title'] == title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:6]  # Get top 5 matches
    anime_indices = [i[0] for i in sim_scores]
    return df['title'].iloc[anime_indices]

# Test the recommendation function
print(recommend_anime('Digimon Adventure: Bokura no War Game!'))